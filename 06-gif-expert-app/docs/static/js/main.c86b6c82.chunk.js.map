{"version":3,"sources":["components/AddCategory.js","helpers/getGif.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","placeholder","getGif","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","i","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAmB9C,OACI,0BAAMC,SAVW,SAAEC,GACnBA,EAAEC,iBAECJ,EAAWK,OAAOC,QAAU,IAC3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,OAMd,2BACIO,KAAK,OACLC,MAAQT,EACRU,SAnBc,SAAEP,GAExBF,EAAcE,EAAEQ,OAAOF,QAkBfG,YAAY,gB,uBC5BfC,EAAM,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACZC,EADY,iDACoCC,UAAUH,GAD9C,+DAECI,MAAOF,GAFR,cAEZG,EAFY,gBAGGA,EAAKC,OAHR,uBAGXC,EAHW,EAGXA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QATvB,kBAaXM,GAbW,4CAAH,sDCENO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEjC,OACI,yBAAKc,UAAU,8CACX,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAKA,KCHJO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECDX,SAAEA,GAAe,IAAD,EACdf,mBAAS,CAC/BsB,KAAM,GACNa,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KAgBxC,OAVAC,qBAAW,WACPxB,EAAOC,GACFwB,MAAM,SAAAC,GACCH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAG1B,CAACpB,IAEGqB,EDb0BK,CAAa1B,GAAjCa,EAFsB,EAE3BN,KAAaa,EAFc,EAEdA,QAErB,OACI,oCACI,wBAAIJ,UAAU,yCAA0ChB,GACtDoB,GAAW,uBAAGJ,UAAU,oCAAb,WACb,yBAAKA,UAAU,aAEPH,EAAOJ,KAAK,SAACkB,GAAD,OACX,kBAAC,EAAD,eACGC,IAAKD,EAAEhB,IACHgB,UEZfE,EAAe,WAAO,IAAD,EAEM5C,mBAAS,CAAC,cAFhB,mBAEvB6C,EAFuB,KAEX9C,EAFW,KAI9B,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACA,4BAEQ8C,EAAWrB,KAAK,SAAAT,GAAQ,OACpB,kBAAC,EAAD,CACA4B,IAAM5B,EACNA,SAAWA,U,MCbnC+B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.c86b6c82.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n    \n    const [inputValue, setInputValue] = useState('');\n\n    // Cada que se introduce una letra se escribe en la caja de texto del input\n    const handleInputChange = ( e ) => {\n        // console.log(e.target.value);\n        setInputValue(e.target.value);\n    };\n\n    const handleSubmit = ( e ) => {\n        e.preventDefault(); // previene que se cargue toda la página\n        // console.log('Submit hecho');\n        if(inputValue.trim().length >= 1){\n            setCategories( cats => [inputValue, ...cats] );\n            setInputValue('');\n        }\n    };\n    \n    return (\n        <form onSubmit={ handleSubmit } >\n            <input\n                type=\"text\"\n                value={ inputValue }\n                onChange={ handleInputChange }\n                placeholder='Buscar...'\n            />\n        </form>\n    )\n};\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired,\n};\n","export const getGif = async(category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=69P2JB6qo3viyWDvHpnvtSyvEGFzNfzb`;\n    const resp = await fetch( url );\n    const {data} = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url\n        }\n    } );\n\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ( {title, url} ) => {\n\n    return (\n        <div className=\"card animate__animated animate__fadeInLeft\">\n            <img src={url} alt={title} />\n            <p>{ title }</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport {GifGridItem} from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n\n    const { data:images, loading } = useFetchGifs(category);\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeInLeft\">{ category }</h3>\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\n            <div className=\"card-grid\">\n                {\n                    images.map( (i) => \n                    (<GifGridItem \n                        key={i.id}\n                        {...i}/>)\n                    )\n                }\n            </div>\n        </>\n    )\n}\n","import { useState, useEffect } from 'react';\nimport {getGif} from '../helpers/getGif';\n\nexport const useFetchGifs = ( category ) => {\n    const [state, setstate] = useState({\n        data: [],\n        loading: true,\n    });\n\n    useEffect( () => {\n        getGif(category)\n            .then( imgs => {\n                    setstate({\n                        data: imgs,\n                        loading: false,\n                    })\n            })\n    }, [category]);\n\n    return state;\n\n}","// Lección 69. GifExpertApp component\nimport React, {useState} from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['Minecraft']);\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories}/>\n            <hr></hr>\n            <ol>\n                {\n                    categories.map( category => \n                        <GifGrid \n                        key={ category }\n                        category={ category } />\n                    )\n                }\n            </ol>\n        </>\n    );\n\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}